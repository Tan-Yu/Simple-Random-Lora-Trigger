name: Test and Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest flake8 black
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Validate Python syntax
      run: |
        python -m py_compile __init__.py
        python -m py_compile nodes/random_lora_trigger.py
        python -m py_compile install.py
    
    - name: Test imports
      run: |
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        # Test if the module can be imported without ComfyUI
        try:
            # This should fail gracefully
            import __init__ as main_module
            print('‚úÖ Module import test passed')
        except ImportError as e:
            print(f'‚ö†Ô∏è Expected import error (ComfyUI not available): {e}')
        except Exception as e:
            print(f'‚ùå Unexpected error: {e}')
            sys.exit(1)
        "
    
    - name: Run installation script
      run: |
        python install.py || true  # Allow failure since ComfyUI isn't installed
    
    - name: Validate JSON files
      run: |
        python -c "
        import json
        import os
        
        # Check if example config is valid JSON
        if os.path.exists('examples/example_config.json'):
            with open('examples/example_config.json', 'r') as f:
                json.load(f)
            print('‚úÖ Example config JSON is valid')
        
        # Check if any generated config is valid
        if os.path.exists('lora_trigger_config.json'):
            with open('lora_trigger_config.json', 'r') as f:
                json.load(f)
            print('‚úÖ Generated config JSON is valid')
        "

  validate-structure:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate repository structure
      run: |
        echo "üîç Checking repository structure..."
        
        # Check required files
        required_files=(
          "README.md"
          "LICENSE" 
          "__init__.py"
          "nodes/random_lora_trigger.py"
          ".gitignore"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
        echo "‚úÖ All required files present"
    
    - name: Check documentation
      run: |
        # Check if README has required sections
        if grep -q "## Installation" README.md && \
           grep -q "## Usage" README.md && \
           grep -q "## Features" README.md; then
          echo "‚úÖ README has required sections"
        else
          echo "‚ùå README missing required sections"
          exit 1
        fi